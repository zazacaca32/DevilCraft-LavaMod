package net.minecraft.client.addon.tco.tiny.blocks.recipes;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import net.minecraft.client.addon.tchestplate.aaamodule.ModuleCore;
import net.minecraft.client.addon.tco.tiny.ConfigHandler;
import net.minecraft.client.addon.tco.tiny.Tiny;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityBlockClearItem;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityBlockColorer;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityBlockCompressionMatter;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityBlockDarkMatterFabricator;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityBlockGeneratorLava;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityBlockLavaAnvil;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityBlockMatterFabricator;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityBlockPatternModule;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityBlockPetDesk;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityBlockPressHammer;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityBlockPressOther;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityBlockRepeaterArmor;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityBlockSmurfChest;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityBlockTurning;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityBlockUpgradeArmor;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityBlockUpgradeUltima;
import net.minecraft.client.addon.tco.tiny.blocks.TileEntity.TileEntityPressSpear;
import net.minecraft.client.addon.tco.tiny.blocks.recipes.Slot_R;
import net.minecraft.client.addon.tco.tiny.blocks.recipes.Stacks;
import net.minecraft.client.addon.tco.tiny.blocks.slots.SlotInv;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;

public class Manager {

   public static Manager INSTANCE = new Manager();
   ArrayList list = new ArrayList();
   ArrayList slots = new ArrayList();
   HashMap index = new HashMap();


   public Manager() {
      Slot_R slot = new Slot_R(0, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(2472, 1, 4)));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(1, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(2456, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2457, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(2458, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(2459, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(2460, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2461, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2462, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2463, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(2479, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2464, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(2465, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(2466, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2475, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2492, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(6)}));
      slot.addStack(new Stacks(new ItemStack(2493, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(6)}));
      slot.addStack(new Stacks(new ItemStack(2494, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(6)}));
      slot.addStack(new Stacks(new ItemStack(2495, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(6)}));
      slot.addStack(new Stacks(new ItemStack(2496, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(6)}));
      slot.addStack(new Stacks(new ItemStack(2811, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2479, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(5811, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(2460, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(2461, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(4823, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(2475, 1, 0), new Object[]{Integer.valueOf(110), Integer.valueOf(3)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(2, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(Tiny.itemMatterAcelerator, 1, 1), new Object[]{Integer.valueOf(10)}));
      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityBlockRepeaterArmor.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();
      slot = new Slot_R(0, SlotInv.Access.I);
      slot.addStack(new Stacks(new ItemStack(326, 1, 0), new ItemStack(325, 1, 0), new Object[]{Integer.valueOf(25)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(1, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(2469, 1, 0), new ItemStack(2469, 1, 1), new Object[]{Integer.valueOf(900), Integer.valueOf(32)}));
      slot.addStack(new Stacks(new ItemStack(2471, 1, 0), new ItemStack(2471, 1, 1), new Object[]{Integer.valueOf(450), Integer.valueOf(16)}));
      slot.addStack(new Stacks(new ItemStack(2470, 1, 0), new ItemStack(2470, 1, 1), new Object[]{Integer.valueOf(150), Integer.valueOf(1)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(2, SlotInv.Access.O);
      slot.addStack(new Stacks(new ItemStack(2469, 1, 1)));
      slot.addStack(new Stacks(new ItemStack(2471, 1, 1)));
      slot.addStack(new Stacks(new ItemStack(2470, 1, 1)));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(3, SlotInv.Access.O);
      slot.addStack(new Stacks(new ItemStack(2472, 1, 3)));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(4, SlotInv.Access.O);
      slot.addStack(new Stacks(new ItemStack(325, 1, 0)));
      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityBlockTurning.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();

      int i;
      for(i = 0; i < 10; ++i) {
         slot = new Slot_R(i, SlotInv.Access.IO);
         slot.addStack(new Stacks(new ItemStack(246, 3, 0), new Object[]{Float.valueOf(4.0F), Float.valueOf(0.5F)}));
         slot.addStack(new Stacks(new ItemStack(194, 1, 0), new Object[]{Float.valueOf(8.0F), Float.valueOf(1.0F)}));
         slot.addStack(new Stacks(new ItemStack(194, 1, 1), new Object[]{Float.valueOf(64.0F), Float.valueOf(8.0F)}));
         slot.addStack(new Stacks(new ItemStack(194, 1, 2), new Object[]{Float.valueOf(512.0F), Float.valueOf(64.0F)}));
         slot.addStack(new Stacks(new ItemStack(194, 1, 3), new Object[]{Float.valueOf(16384.0F), Float.valueOf(16384.0F)}));
         slot.addStack(new Stacks(new ItemStack(194, 1, 4), new Object[]{Float.valueOf(8192.0F), Float.valueOf(8192.0F)}));
         slot.addStack(new Stacks(new ItemStack(Tiny.MatterGenerator), new Object[]{Float.valueOf(16384.0F), Float.valueOf(16384.0F)}));
         this.slots.add(slot.slotIndex, slot);
      }

      slot = new Slot_R(10, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(2484, 1, 0), new Object[]{Float.valueOf(1.0F)}));
      slot.addStack(new Stacks(new ItemStack(2484, 1, 1), new Object[]{Float.valueOf(3.0F)}));
      slot.addStack(new Stacks(new ItemStack(2484, 1, 2), new Object[]{Float.valueOf(10.0F)}));
      slot.addStack(new Stacks(new ItemStack(2484, 1, 3), new Object[]{Float.valueOf(30.0F)}));
      slot.addStack(new Stacks(new ItemStack(2484, 1, 4), new Object[]{Float.valueOf(60.0F)}));
      slot.addStack(new Stacks(new ItemStack(2484, 1, 5), new Object[]{Float.valueOf(75.0F)}));
      slot.addStack(new Stacks(new ItemStack(2484, 1, 6), new Object[]{Float.valueOf(80.0F)}));
      slot.addStack(new Stacks(new ItemStack(2484, 1, 7), new Object[]{Float.valueOf(90.0F)}));
      slot.addStack(new Stacks(new ItemStack(2484, 1, 8), new Object[]{Float.valueOf(95.0F)}));
      slot.addStack(new Stacks(new ItemStack(2484, 1, 9), new Object[]{Float.valueOf(115.0F)}));
      slot.addStack(new Stacks(new ItemStack(2484, 1, 10), new Object[]{Float.valueOf(130.0F)}));
      slot.addStack(new Stacks(new ItemStack(2484, 1, 11), new Object[]{Float.valueOf(150.0F)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(11, ConfigHandler.configMatterUtil?SlotInv.Access.IO:SlotInv.Access.NONE);
      slot.addStack(new Stacks(new ItemStack(30189, 1, 0), new Object[]{Float.valueOf(5000.0F)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(12, SlotInv.Access.O);
      slot.addStack(new Stacks(new ItemStack(30188, 1, 0), new Object[]{Float.valueOf(ConfigHandler.configMatterCost)}));
      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityBlockMatterFabricator.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();

      for(i = 0; i < 18; ++i) {
         slot = new Slot_R(i, SlotInv.Access.IO);
         slot.addStack(new Stacks(new ItemStack(30188, 1, 0)));
         this.slots.add(slot.slotIndex, slot);
      }

      slot = new Slot_R(18, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(2472, 1, 0), new ItemStack(2472, 1, 15), new Object[0]));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(19, SlotInv.Access.O);
      slot.addStack(new Stacks(new ItemStack(2472, 1, 15)));
      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityBlockCompressionMatter.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();
      slot = new Slot_R(0, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemCap1[1], 1, 0), new Object[]{Integer.valueOf(52)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[10], 1, 0), new Object[]{Integer.valueOf(31)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[11], 1, 0), new Object[]{Integer.valueOf(21)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[12], 1, 0), new Object[]{Integer.valueOf(22)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[13], 1, 0), new Object[]{Integer.valueOf(23)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[14], 1, 0), new Object[]{Integer.valueOf(24)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[15], 1, 0), new Object[]{Integer.valueOf(25)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[16], 1, 0), new Object[]{Integer.valueOf(26)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[17], 1, 0), new Object[]{Integer.valueOf(27)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[18], 1, 0), new Object[]{Integer.valueOf(28)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[19], 1, 0), new Object[]{Integer.valueOf(29)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.exoItem[1], 1, 0), new Object[]{Integer.valueOf(201)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemHeb[1], 1, 0), new Object[]{Integer.valueOf(205)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemCap3[1], 1, 0), new Object[]{Integer.valueOf(250)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemCap1[1], 1, 0), new Object[]{Integer.valueOf(100)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemKDI[1], 1, 0), new Object[]{Integer.valueOf(9999)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemLGen[1], 1, 0), new Object[]{Integer.valueOf(501)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemKrid[1], 1, 0), new Object[]{Integer.valueOf(777)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemWither[1], 1, 0), new Object[]{Integer.valueOf(888)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemPartLava0[1], 1, 0), new Object[]{Integer.valueOf(1001)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemPartLava1[1], 1, 0), new Object[]{Integer.valueOf(1000)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemKorona[1], 1, 0), new Object[]{Integer.valueOf(7778)}));
      slot.addStack(new Stacks(new ItemStack(6972, 1, 0), new Object[]{Integer.valueOf(2222)}));
      slot.addStack(new Stacks(new ItemStack(6973, 1, 0), new Object[]{Integer.valueOf(2223)}));
      slot.addStack(new Stacks(new ItemStack(6974, 1, 0), new Object[]{Integer.valueOf(2224)}));
      slot.addStack(new Stacks(new ItemStack(6975, 1, 0), new Object[]{Integer.valueOf(2225)}));
      slot.addStack(new Stacks(new ItemStack(6976, 1, 0), new Object[]{Integer.valueOf(2226)}));
      slot.addStack(new Stacks(new ItemStack(6977, 1, 0), new Object[]{Integer.valueOf(2227)}));
      slot.addStack(new Stacks(new ItemStack(6978, 1, 0), new Object[]{Integer.valueOf(2228)}));
      slot.addStack(new Stacks(new ItemStack(6979, 1, 0), new Object[]{Integer.valueOf(2229)}));
      slot.addStack(new Stacks(new ItemStack(6980, 1, 0), new Object[]{Integer.valueOf(2230)}));
      slot.addStack(new Stacks(new ItemStack(6981, 1, 0), new Object[]{Integer.valueOf(2231)}));
      slot.addStack(new Stacks(new ItemStack(6982, 1, 0), new Object[]{Integer.valueOf(2232)}));
      slot.addStack(new Stacks(new ItemStack(6983, 1, 0), new Object[]{Integer.valueOf(2233)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[16], 1, 0), new Object[]{Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[17], 1, 0), new Object[]{Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[18], 1, 0), new Object[]{Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[19], 1, 0), new Object[]{Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[20], 1, 0), new Object[]{Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[21], 1, 0), new Object[]{Integer.valueOf(5)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[22], 1, 0), new Object[]{Integer.valueOf(6)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[23], 1, 0), new Object[]{Integer.valueOf(7)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[24], 1, 0), new Object[]{Integer.valueOf(8)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[25], 1, 0), new Object[]{Integer.valueOf(9)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[26], 1, 0), new Object[]{Integer.valueOf(10)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[27], 1, 0), new Object[]{Integer.valueOf(11)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[28], 1, 0), new Object[]{Integer.valueOf(12)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[29], 1, 0), new Object[]{Integer.valueOf(13)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[30], 1, 0), new Object[]{Integer.valueOf(14)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[31], 1, 0), new Object[]{Integer.valueOf(15)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(1, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(2456, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(117), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2457, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(211), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2458, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(311), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2459, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(411), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2460, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(116), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2461, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(118), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2462, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(115), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2463, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(210), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2464, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(310), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2465, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(410), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2466, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(114), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2475, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(113), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2479, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(112), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2480, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(111), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2481, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(209), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2482, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(309), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2483, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(409), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2821, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(110), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2798, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(109), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2799, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(208), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2800, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(308), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2801, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(408), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2822, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(108), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2823, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(207), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2824, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(307), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2825, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(407), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2813, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(107), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2814, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(206), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2815, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(306), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2816, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(406), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6361, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(106), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2827, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(105), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2828, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(205), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2829, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(305), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2831, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(405), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6357, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(104), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6358, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(204), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6359, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(304), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6360, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(404), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(22544, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(103), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(22545, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(203), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(22546, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(303), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(22547, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(403), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6365, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(102), Integer.valueOf(5)}));
      slot.addStack(new Stacks(new ItemStack(6366, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(202), Integer.valueOf(6)}));
      slot.addStack(new Stacks(new ItemStack(6367, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(302), Integer.valueOf(6)}));
      slot.addStack(new Stacks(new ItemStack(6368, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(402), Integer.valueOf(6)}));
      slot.addStack(new Stacks(new ItemStack(3168, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(101), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(3169, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(201), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(3170, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(301), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(3171, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(401), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 1), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 2), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 3), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 4), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 5), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 6), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 7), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 8), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 9), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 10), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityBlockUpgradeArmor.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();
      slot = new Slot_R(0, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(2490, 1, 8), new Object[]{Integer.valueOf(0)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(1, SlotInv.Access.O);
      slot.addStack(new Stacks(new ItemStack(2470, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(1)}));
      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityBlockSmurfChest.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();
      slot = new Slot_R(0, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[16], 1, 0), new Object[]{Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[17], 1, 0), new Object[]{Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[18], 1, 0), new Object[]{Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[19], 1, 0), new Object[]{Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[20], 1, 0), new Object[]{Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[21], 1, 0), new Object[]{Integer.valueOf(5)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[22], 1, 0), new Object[]{Integer.valueOf(6)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[23], 1, 0), new Object[]{Integer.valueOf(7)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[24], 1, 0), new Object[]{Integer.valueOf(8)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[25], 1, 0), new Object[]{Integer.valueOf(9)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[26], 1, 0), new Object[]{Integer.valueOf(10)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[27], 1, 0), new Object[]{Integer.valueOf(11)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[28], 1, 0), new Object[]{Integer.valueOf(12)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[29], 1, 0), new Object[]{Integer.valueOf(13)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[30], 1, 0), new Object[]{Integer.valueOf(14)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[31], 1, 0), new Object[]{Integer.valueOf(15)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDelColor[1], 1, 0), new Object[]{Integer.valueOf(20)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(1, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(2456, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2457, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(2458, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(2459, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(2462, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2463, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(2464, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(2465, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(2456, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2457, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(2458, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(2459, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(2480, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2481, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(2482, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(2483, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(2813, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2814, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(2815, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(2816, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(2822, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2823, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(2824, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(2825, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(2851, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2852, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(2853, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(2854, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(6357, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(6358, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(6359, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(6360, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(2859, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2860, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(2861, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(2862, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(2811, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(6361, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2867, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2868, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(2869, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(2870, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(2863, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2864, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(2865, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(2866, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(2827, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2828, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(2829, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(2831, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(6365, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(6366, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(6367, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(6368, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(22544, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(22545, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(22546, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(22547, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(3168, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(3169, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(3170, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(3171, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(2871, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      
      slot.addStack(new Stacks(new ItemStack(2804, 1, 0), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 1), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 2), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 3), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 4), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 5), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 6), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 7), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 8), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 9), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(2804, 1, 10), new Object[]{Integer.valueOf(5), Integer.valueOf(1)}));
      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityBlockColorer.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();
      slot = new Slot_R(0, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(ModuleCore.item[4], 1, 0), new Object[]{Integer.valueOf(0)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(1, SlotInv.Access.IO);      
      slot.addStack(new Stacks(new ItemStack(2480, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(10)}));
      slot.addStack(new Stacks(new ItemStack(2481, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(11)}));
      slot.addStack(new Stacks(new ItemStack(2482, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(12)}));
      slot.addStack(new Stacks(new ItemStack(2483, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(13)}));
      
      slot.addStack(new Stacks(new ItemStack(2827, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(14)}));
      slot.addStack(new Stacks(new ItemStack(2828, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(15)}));
      slot.addStack(new Stacks(new ItemStack(2829, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(16)}));
      slot.addStack(new Stacks(new ItemStack(2830, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(17)}));
      
      slot.addStack(new Stacks(new ItemStack(3168, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(18)}));
      slot.addStack(new Stacks(new ItemStack(3169, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(19)}));
      slot.addStack(new Stacks(new ItemStack(3170, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(20)}));
      slot.addStack(new Stacks(new ItemStack(3171, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(21)}));
      
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[0], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[1], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[2], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[3], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[4], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[5], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[6], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[7], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[8], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[9], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[10], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[11], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[12], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[13], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[14], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemColor[15], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemLGen[0], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemKrid[0], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemKDI[0], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemCap1[0], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[0], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[1], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[2], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[3], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[4], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[5], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[6], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[7], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[8], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[9], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.exoItem[0], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemHeb[0], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemCap3[0], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemCap1[0], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDelColor[0], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)})); 
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemKorona[0], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemWither[0], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemPartLava0[0], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemPartLava1[0], 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityBlockPatternModule.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();
      slot = new Slot_R(0, SlotInv.Access.O);
      slot.addStack(new Stacks(new ItemStack(20977, 1, 0)));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(1, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(20978, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(1)}));
      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityBlockDarkMatterFabricator.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();
      slot = new Slot_R(0, SlotInv.Access.O);
      slot.addStack(new Stacks(new ItemStack(2467, 1, 0)));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(1, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(21162, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(1)}));
      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityBlockGeneratorLava.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();
      slot = new Slot_R(0, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(Tiny.BagPirat, 1, 2), new ItemStack(325, 1, 0), new Object[]{Integer.valueOf(25)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(1, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(Item.dyePowder, 1, 2), new ItemStack(2490, 1, 0), new Object[]{Integer.valueOf(9000), Integer.valueOf(32)}));
      slot.addStack(new Stacks(new ItemStack(Item.dyePowder, 1, 9), new ItemStack(2490, 1, 1), new Object[]{Integer.valueOf(9000), Integer.valueOf(32)}));
      slot.addStack(new Stacks(new ItemStack(Item.dyePowder, 1, 1), new ItemStack(2490, 1, 2), new Object[]{Integer.valueOf(9000), Integer.valueOf(32)}));
      slot.addStack(new Stacks(new ItemStack(Item.dyePowder, 1, 14), new ItemStack(2490, 1, 3), new Object[]{Integer.valueOf(9000), Integer.valueOf(32)}));
      slot.addStack(new Stacks(new ItemStack(Item.dyePowder, 1, 11), new ItemStack(2490, 1, 4), new Object[]{Integer.valueOf(9000), Integer.valueOf(32)}));
      slot.addStack(new Stacks(new ItemStack(Item.dyePowder, 1, 10), new ItemStack(2490, 1, 5), new Object[]{Integer.valueOf(9000), Integer.valueOf(32)}));
      slot.addStack(new Stacks(new ItemStack(Item.dyePowder, 1, 7), new ItemStack(2490, 1, 6), new Object[]{Integer.valueOf(9000), Integer.valueOf(32)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(2, SlotInv.Access.O);
      slot.addStack(new Stacks(new ItemStack(2490, 1, 0)));
      slot.addStack(new Stacks(new ItemStack(2490, 1, 1)));
      slot.addStack(new Stacks(new ItemStack(2490, 1, 2)));
      slot.addStack(new Stacks(new ItemStack(2490, 1, 3)));
      slot.addStack(new Stacks(new ItemStack(2490, 1, 4)));
      slot.addStack(new Stacks(new ItemStack(2490, 1, 5)));
      slot.addStack(new Stacks(new ItemStack(2490, 1, 6)));
      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityBlockPetDesk.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();
      slot = new Slot_R(0, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(20970, 1, 0), new Object[]{Integer.valueOf(25)}));
      slot.addStack(new Stacks(new ItemStack(2486, 1, 0), new Object[]{Integer.valueOf(100)}));
      slot.addStack(new Stacks(new ItemStack(2478, 1, 0), new Object[]{Integer.valueOf(40)}));
      slot.addStack(new Stacks(new ItemStack(2855, 1, 0), new Object[]{Integer.valueOf(100)}));
      slot.addStack(new Stacks(new ItemStack(6557, 1, 0), new Object[]{Integer.valueOf(100)}));
      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityBlockLavaAnvil.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();
      slot = new Slot_R(0, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(2478, 1, 0), new Object[]{Integer.valueOf(150), Integer.valueOf(100)}));
      slot.addStack(new Stacks(new ItemStack(6557, 1, 0), new Object[]{Integer.valueOf(100), Integer.valueOf(80)}));
      slot.addStack(new Stacks(new ItemStack(3589, 1, 0), new Object[]{Integer.valueOf(160), Integer.valueOf(100)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(1, SlotInv.Access.O);
      slot.addStack(new Stacks(new ItemStack(2478, 1, 0), new Object[]{Integer.valueOf(150), Integer.valueOf(100)}));
      slot.addStack(new Stacks(new ItemStack(6557, 1, 0), new Object[]{Integer.valueOf(100), Integer.valueOf(80)}));
      slot.addStack(new Stacks(new ItemStack(3589, 1, 0), new Object[]{Integer.valueOf(160), Integer.valueOf(100)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(2, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(2478, 1, 0), new Object[]{Integer.valueOf(150), Integer.valueOf(100)}));
      slot.addStack(new Stacks(new ItemStack(6557, 1, 0), new Object[]{Integer.valueOf(100), Integer.valueOf(80)}));
      slot.addStack(new Stacks(new ItemStack(3589, 1, 0), new Object[]{Integer.valueOf(160), Integer.valueOf(100)}));
      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityBlockPressHammer.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();
      slot = new Slot_R(0, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(Tiny.trap11, 1, 0), new Object[]{Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(Tiny.trap8, 1, 0), new Object[]{Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(Tiny.trap7, 1, 0), new Object[]{Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(Tiny.trap6, 1, 0), new Object[]{Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(Tiny.trap5, 1, 0), new Object[]{Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(Tiny.trap4, 1, 0), new Object[]{Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(Tiny.trap1, 1, 0), new Object[]{Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(Tiny.trap2, 1, 0), new Object[]{Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(Tiny.trap3, 1, 0), new Object[]{Integer.valueOf(1)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(1, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(2516, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6581, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6578, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6579, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6580, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6582, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2958, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2599, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2598, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6361, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityPressSpear.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();
      slot = new Slot_R(0, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(3870, 1, 0), new Object[]{Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(3871, 1, 0), new Object[]{Integer.valueOf(2)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(1, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(2599, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2478, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2855, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6581, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2486, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6557, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6562, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6571, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6572, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(6579, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(20970, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(21230, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(21233, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(21232, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2516, 1, 0), new Object[]{Integer.valueOf(10), Integer.valueOf(0)}));
      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityBlockClearItem.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();
      slot = new Slot_R(0, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(6568, 1, 0), new Object[]{Integer.valueOf(1), Integer.valueOf(100)}));
      slot.addStack(new Stacks(new ItemStack(6561, 1, 0), new Object[]{Integer.valueOf(100), Integer.valueOf(90)}));
      slot.addStack(new Stacks(new ItemStack(6566, 1, 0), new Object[]{Integer.valueOf(100), Integer.valueOf(80)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(1, SlotInv.Access.O);
      slot.addStack(new Stacks(new ItemStack(6568, 1, 0), new Object[]{Integer.valueOf(1), Integer.valueOf(100)}));
      slot.addStack(new Stacks(new ItemStack(6561, 1, 0), new Object[]{Integer.valueOf(100), Integer.valueOf(90)}));
      slot.addStack(new Stacks(new ItemStack(6566, 1, 0), new Object[]{Integer.valueOf(100), Integer.valueOf(80)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(2, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(6568, 1, 0), new Object[]{Integer.valueOf(1), Integer.valueOf(100)}));
      slot.addStack(new Stacks(new ItemStack(6561, 1, 0), new Object[]{Integer.valueOf(100), Integer.valueOf(90)}));
      slot.addStack(new Stacks(new ItemStack(6566, 1, 0), new Object[]{Integer.valueOf(100), Integer.valueOf(80)}));
      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityBlockPressOther.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();
      slot = new Slot_R(0, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[0], 1, 0), new Object[]{Integer.valueOf(1)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[1], 1, 0), new Object[]{Integer.valueOf(2)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[2], 1, 0), new Object[]{Integer.valueOf(3)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[3], 1, 0), new Object[]{Integer.valueOf(4)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[4], 1, 0), new Object[]{Integer.valueOf(5)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[5], 1, 0), new Object[]{Integer.valueOf(6)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[6], 1, 0), new Object[]{Integer.valueOf(7)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[7], 1, 0), new Object[]{Integer.valueOf(8)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[8], 1, 0), new Object[]{Integer.valueOf(9)}));
      slot.addStack(new Stacks(new ItemStack(ModuleCore.itemDark[9], 1, 0), new Object[]{Integer.valueOf(10)}));
      this.slots.add(slot.slotIndex, slot);
      slot = new Slot_R(1, SlotInv.Access.IO);
      slot.addStack(new Stacks(new ItemStack(20970, 1, 0), new Object[]{Integer.valueOf(250), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2855, 1, 0), new Object[]{Integer.valueOf(250), Integer.valueOf(0)}));
      slot.addStack(new Stacks(new ItemStack(2855, 1, 0), new Object[]{Integer.valueOf(300), Integer.valueOf(0)}));
      this.slots.add(slot.slotIndex, slot);
      this.slots.trimToSize();
      this.list.add((ArrayList)this.slots.clone());
      this.index.put(TileEntityBlockUpgradeUltima.class, Integer.valueOf(this.list.size() - 1));
      this.slots.clear();
      this.slots = null;
      boolean u = false;
   }

   public int getIndex(Class tileclazz) {
      return this.index.containsKey(tileclazz)?((Integer)this.index.get(tileclazz)).intValue():-1;
   }

   public List Get(int index) {
      return (List)this.list.get(index);
   }

}
